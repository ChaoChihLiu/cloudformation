AWSTemplateFormatVersion: 2010-09-09

###### PARAMETERS SECTION ######

Parameters:
  NetworkStackName:
    Description: 'NetworkStackName which NAT server resides'
    Type: String
  NATInstanceType:
    Description: 'NAT EC2 instance type'
    Type: String
    Default: t2.micro
    AllowedValues:  [t1.micro, t2.nano, t2.micro, t3.micro]
    ConstraintDescription: 'Must be a valid EC2 instance type'
  NATAMI:
    Description: 'Id of an existing AMI image for launching EC2 instance'
    Type: AWS::EC2::Image::Id
    Default: 'ami-05a4cce8936a89f06'
    ConstraintDescription: 'Must be ID of an existing EC2 image'
  NATSSHKey:
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'nat-key'
    ConstraintDescription: 'Must be the name of an existing EC2 KeyPair'
  NATAllowedIP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '0.0.0.0/0'
    Description: 'Valid CIDR block of source should be allowed'
    Type: String
    ConstraintDescription: 'Must be a valid CIDR block'
  # TimeZone:
  #   Description: "Time Zone"
  #   Type: String
  #   Default: "Asia/Singapore"
  EnvName:
    Description: "Environment name"
    Type: String
    Default: "dev"
  RootStorage:
    Description: Size Root for (GiB)
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: 8

###### RESOURCES SECTION ######

Resources:
  ####### LAUNCH TEMPLATE
  NATLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${EnvName}-NATLaunchTemplate"
      LaunchTemplateData:
        UserData: !Base64 |
          #!/bin/bash -x
          yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum-config-manager --enable epel
          yum install telnet -y
          yum install iftop -y
        KeyName: !Ref NATSSHKey
        ImageId: !Ref NATAMI
        BlockDeviceMappings:
          -
            DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: !Ref RootStorage
              VolumeType: gp2
        InstanceType: !Ref NATInstanceType
      
  NATSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Limits ssh access to NAT host from outside'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref NATAllowedIP
      # VpcId: !Ref VpcId
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-${EnvName}-VPCId"
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-NATSecurityGroup"
  NAT:
    Type: 'AWS::EC2::Instance'
    Properties:
      # AvailabilityZone: !Ref SubnetAZ
      AvailabilityZone: 
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-${EnvName}-Subnet1AZ"
      # SubnetId: !Ref PublicSubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref NATLaunchTemplate
        Version: !GetAtt NATLaunchTemplate.LatestVersionNumber
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"  
          GroupSet: 
            - Ref: "NATSG"
          SubnetId: 
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-${EnvName}-PublicSubnet1Id"
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-nat"          

###### OUTPUTS SECTION ######

Outputs:
  NATIP:
    Description: Public IP of NAT server
    Value: !GetAtt NAT.PublicIp
    Export:
      Name: !Sub "${EnvName}-NATPublicIP"
  NATSecurityGroup:
    Description: The ID of the NAT security group
    Value: !GetAtt NATSG.GroupId
    Export:
      Name: !Sub "${EnvName}-NATSecurityGroup"
